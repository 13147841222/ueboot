package ${controllerPackageName};

import com.ueboot.core.controller.BasicController;
import com.ueboot.core.exception.BusinessException;
import com.ueboot.core.http.response.Response;
import ${controllerPackageName}.vo.*;
import ${entityPackageName}.${entityFullName};
import ${servicePackageName}.${entityName}Service;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.util.Assert;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;

import com.ueboot.core.annotation.UeLog;
import java.util.List;
import java.util.Optional;


/**
 * TODO
 *
 * @author ${USER}
 */
@Slf4j
@RestController
@RequestMapping(value = "/private$requestPath${lowEntityName}/")
public class ${entityName}Controller extends BasicController<${entityFullName}> {

    private final String MODULE_NAME = "TODO";

    private final String P_PREFIX = "${lowEntityName}:${lowEntityName}:";

    @Resource
    private ${entityName}Service ${lowEntityName}Service;

    /**
    * TODO 进行分页查询
    *
    * @param pageable TODO分页对象
    * @param req 请求对象
    * @return 已分页的数据对象集合
    */
    @PostMapping(value = PAGE)
    @RequiresPermissions(value = P_PREFIX + PAGE)
    @UeLog(value = MODULE_NAME + PAGE_CH)
    public Response<Page<${entityName}Resp>> page(@PageableDefault(value = 15, sort = { "id" }, direction = Sort.Direction.ASC)
                                                     Pageable pageable, @RequestBody(required = false) ${entityName}FindReq req){
        Page<${entityFullName}> ${lowEntityName}Page = ${lowEntityName}Service.pagingBy(pageable);
        return converterDTV.map(${lowEntityName}Page, ${entityName}Resp::to${entityName}Resp);
    }

    /**
    * 数据列表查询
    *
    * @return 数据对象集合
    */
    @PostMapping(value = LIST)
    @RequiresPermissions(value = P_PREFIX + LIST)
    @UeLog(value = MODULE_NAME + LIST_CH)
    public Response<List<${entityName}Resp>> list() {
        List<${entityFullName}> ${lowEntityName}List = ${lowEntityName}Service.findAll();
        return converterDTV.map(${lowEntityName}List, ${entityName}Resp::to${entityName}Resp);
    }

    /**
    * TODO数据添加
    *
    * @param req 数据新增请求对象
    * @return 主键ID
    */
    @PostMapping(value = ADD)
    @RequiresPermissions(value = P_PREFIX + ADD)
    @UeLog(value = MODULE_NAME + ADD_CH)
    public Response<Long> add(@RequestBody ${entityName}Req req) {
        return new Response<>(${lowEntityName}Service.save(req.to${entityFullName}()).getId());
    }

    /**
    * TODO数据修改
    *
    * @param req 数据修改请求对象
    */
    @PostMapping(value = UPDATE)
    @RequiresPermissions(value = P_PREFIX + UPDATE)
    @UeLog(value = MODULE_NAME + UPDATE_CH)
    public Response<Long> update(@RequestBody ${entityName}Req req) {
        Assert.notNull(req.getId(), "修改缺少关键参数");
        return new Response<>(${lowEntityName}Service.save(req.to${entityFullName}()).getId());
    }

    /**
    * 批量删除
    *
    * @param ids 删除数据的主键ID集合
    */
    @PostMapping(value = DELETE)
    @RequiresPermissions(value = P_PREFIX + DELETE)
    @UeLog(value = MODULE_NAME + DELETE_CH)
    public Response<Void> delete(Long[] ids) {
        for (Long id: ids) {
            ${lowEntityName}Service.logicDelete(id);
        }
        return new Response<>();
    }

    /**
    * 根据主键ID获取单条记录的明细信息
    *
    * @param id 请求ID
    * @return 明细信息数据对象
    */
    @PostMapping(value = GET + "/{id}")
    @RequiresPermissions(value = P_PREFIX + GET)
    @UeLog(value = MODULE_NAME + GET_CH)
    public Response<${entityName}Resp> get(@PathVariable Long id) {
        Assert.notNull(id, "修改缺少关键参数");
        Optional<${entityFullName}> optional${entityName} = ${lowEntityName}Service.findById(id);
        return optional${entityName}.map(${lowEntityName} -> new Response<>(${entityName}Resp.to${entityName}Resp(${lowEntityName}))).orElseGet(() -> new Response<>(new ${entityName}Resp()));
    }
}
